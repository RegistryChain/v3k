import { encodeFunctionData, Hex, namehash } from 'viem'

export const useTextResolverReadBytes = async (nodeHash: Hex) => {
  const keys = [
    'LEI',
    'name',
    'partner__[0]__name',
    'partner__[0]__type',
    'partner__[0]__wallet__address',
    'partner__[0]__physical__address',
    'partner__[0]__DOB',
    'partner__[0]__is__manager',
    'partner__[0]__is__signer',
    'partner__[0]__lockup',
    'partner__[0]__shares',
    'partner__[1]__name',
    'partner__[1]__type',
    'partner__[1]__wallet__address',
    'partner__[1]__physical__address',
    'partner__[1]__DOB',
    'partner__[1]__is__manager',
    'partner__[1]__is__signer',
    'partner__[1]__lockup',
    'partner__[1]__shares',
    'partner__[2]__name',
    'partner__[2]__type',
    'partner__[2]__wallet__address',
    'partner__[2]__physical__address',
    'partner__[2]__DOB',
    'partner__[2]__is__manager',
    'partner__[2]__is__signer',
    'partner__[2]__lockup',
    'partner__[2]__shares',
    'partner__[3]__name',
    'partner__[3]__type',
    'partner__[3]__wallet__address',
    'partner__[3]__physical__address',
    'partner__[3]__DOB',
    'partner__[3]__is__manager',
    'partner__[3]__is__signer',
    'partner__[3]__lockup',
    'partner__[3]__shares',
    'partner__[4]__name',
    'partner__[4]__type',
    'partner__[4]__wallet__address',
    'partner__[4]__physical__address',
    'partner__[4]__DOB',
    'partner__[4]__is__manager',
    'partner__[4]__is__signer',
    'partner__[4]__lockup',
    'partner__[4]__shares',
    'partner__[5]__name',
    'partner__[5]__type',
    'partner__[5]__wallet__address',
    'partner__[5]__physical__address',
    'partner__[5]__DOB',
    'partner__[5]__is__manager',
    'partner__[5]__is__signer',
    'partner__[5]__lockup',
    'partner__[5]__shares',
    'company__name',
    'company__entity__code',
    'company__registrar',
    'company__type',
    'company__description',
    'company__address',
    'company__purpose',
    'company__formation__date',
    'company__lockup__days',
    'company__additional__terms',
    // 'company__arbitrator',
    'company__selected__model',
  ]

  const encodes = keys.map((text) => {
    return {
      encode: encodeFunctionData({
        abi: [
          {
            inputs: [
              {
                internalType: 'bytes32',
                name: 'node',
                type: 'bytes32',
              },
              {
                internalType: 'string',
                name: 'key',
                type: 'string',
              },
            ],
            name: 'text',
            outputs: [
              {
                internalType: 'string',
                name: '',
                type: 'string',
              },
            ],
            stateMutability: 'view',
            type: 'function',
          },
        ],
        functionName: 'text',
        args: [nodeHash, text],
      }),
      key: text,
    }
  })
  return encodes
}
